<?php

namespace App\Http\Controllers;

use App\Http\Controllers\converter\req\RequestTo{{model}}ReqConverter;
use App\Models\{{model}};
use App\Services\{{model}}Service;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Routing\Redirector;
use Illuminate\Support\Facades\Log;
use Illuminate\View\View;


class {{model}}Controller extends Controller
{
    protected ${{modelVariable}}Service;
    protected $requestTo{{model}}ReqConverter;

    /**
     * {{model}}Controller constructor.
     * @param {{model}}Service ${{modelVariable}}Service
     * @param RequestTo{{model}}ReqConverter $requestTo{{model}}ReqConverter
     */
    public function __construct({{model}}Service ${{modelVariable}}Service, RequestTo{{model}}ReqConverter $requestTo{{model}}ReqConverter)
    {
        $this->{{modelVariable}}Service = ${{modelVariable}}Service;
        $this->requestTo{{model}}ReqConverter = $requestTo{{model}}ReqConverter;
    }


    /**
     * index
     */
    public function index()
    {
        ${{modelVariable}}s = $this->{{modelVariable}}Service->getAll();
        return view('{{modelVariable}}.index', compact('{{modelVariable}}s'));
    }


    /**
     * init create a {{model}}
     */
    public function create()
    {
        return view('{{modelVariable}}.create');
    }


    /**
     * Store a newly created resource in storage.
     * @param Request $request
     * @return Application|Factory|RedirectResponse|Redirector|View
     */
    public function store({{model}}Request ${{modelVariable}}Request, {{model}} ${{modelVariable}})
    {
        {{model}}Request::validate();

        ${{modelVariable}} = $this->requestTo{{model}}ReqConverter->convert(${{modelVariable}}Request);

        try {
            $this->{{modelVariable}}Service->create(${{modelVariable}});
        } catch (\Throwable $e) {
            Log::error('Could not create {{modelVariable}}. Error occured ' . $e->getMessage());
            return view('{{modelVariable}}.index', compact('{{modelVariable}}'))->with('error', '{{model}} could not save!');
        }

        return redirect('/{{modelVariable}}')->with('success', '{{model}} saved!');
    }


    /**
     * @param $id
     * @return Application|Factory|RedirectResponse|Redirector|View
     */
    public function edit({{model}}Request ${{modelVariable}}Request, {{model}} ${{modelVariable}})
    {
        ${{modelVariable}} = null;
        try {
            ${{modelVariable}} = new {{model}}(['id'=>${{modelVariable}}->id]);
            ${{modelVariable}} = $this->{{modelVariable}}Service->read(${{modelVariable}});
        } catch (\Throwable $e) {
            Log::error('Could not read {{modelVariable}}. Error occured ' . $e->getMessage());
            return redirect('/{{modelVariable}}')->with('error', '{{model}} does not exist!');
        }
        return view('{{modelVariable}}.edit', compact('{{modelVariable}}'));
    }


    /**
     * @param Request $request
     * @param $id
     * @return Application|Factory|RedirectResponse|Redirector|View
     */
    public function update({{model}}Request ${{modelVariable}}Request, {{model}} ${{modelVariable}})
    {
        {{model}}Request::validate();

        ${{modelVariable}} = $this->requestTo{{model}}ReqConverter->convert(${{modelVariable}}Request);
        ${{modelVariable}}->id = $id;

        try {
            $this->{{modelVariable}}Service->update(${{modelVariable}});
        } catch (\Throwable $e) {
            Log::error('Could not update {{modelVariable}}. Error occured ' . $e->getMessage());
            return view('{{modelVariable}}.edit', compact('{{modelVariable}}'))->with('error', '{{model}} could not update!');
        }

        return redirect('/{{modelVariable}}')->with('success', '{{model}} updated!');
    }


    /**
     * @param $id
     * @return Application|RedirectResponse|Redirector
     */
    public function destroy($id)
    {
        try {
            $this->{{modelVariable}}Service->delete(new {{model}}(['id'=>$id]));
            } catch (\Throwable $e) {
            Log::error('Could not delete {{modelVariable}}. Error occured ' . $e->getMessage());
            return redirect('/{{modelVariable}}')->with('error', '{{model}} does not exist!');
        }

        return redirect('/{{modelVariable}}')->with('success', '{{model}} deleted!');
    }
}
